# -*- coding: utf-8 -*-
"""sparkstask1 Shriyash Thorat.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o1ckYP8CvcM1viflJIHVmwNGAlemJ-nn

Importing Libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

"""Reading the dataset"""

url ="http://bit.ly/w-data"
dataset = pd.read_csv(url)
print("Data imported successfully")

"""Summarize the Dataset"""

dataset.shape
dataset.head(5)

dataset.describe()

"""Plotting the distribution of scores"""

dataset.plot(x='Hours', y='Scores', style='o')  
plt.title('Hours vs Percentage')  
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Score')  
plt.show()

"""Seggregate dataset intoX(input/independentvariable)&Y(output/dependent)"""

X=dataset.iloc[:,:-1]

Y=dataset.iloc[:,-1]

"""Splitting Dataset To Train and Test"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.25,random_state=0)

"""Feature Scaling

Training
"""

from sklearn.linear_model import LinearRegression  
model = LinearRegression()  
model.fit(x_train, y_train) 

print("Training complete.")

"""Plotting the regression line"""

line = model.coef_*X+model.intercept_

plt.scatter(X, Y)
plt.plot(X, line);
plt.show()

"""Predicting the scores"""

y_pred=model.predict(x_test)

from sklearn.metrics import r2_score
r2score = r2_score(y_test,y_pred)
print("R2Score",r2score*100)

df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})  
df

x=9.25
score=[[x]]
PredictedmodelResult = model.predict(score)
print(PredictedmodelResult)

from sklearn import metrics  
print('Mean Absolute Error:', 
      metrics.mean_absolute_error(y_test, y_pred))